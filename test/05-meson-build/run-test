#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_make()
{
   log_fluff "####################################"
   log_fluff ${MULLE_MAKE} ${MULLE_MAKE_FLAGS} "$@"
   log_fluff "####################################"

   exekutor ${MULLE_MAKE} ${MULLE_MAKE_FLAGS} "$@"
}


expect_content()
{
   local output="$1"
   local expect="$2"

   if [ ! -f "${output}" ]
   then
      if [ -z "${expect}" ]
      then
         return
      fi
      fail "Did not produce \"${output}\" as expected"
   else
      if [ -z "${expect}" ]
      then
         fail "Did produce \"${output}\" unexpectedly. Nothing was expected"
      fi
   fi

   if [ -f "${expect}.${MULLE_UNAME}" ]
   then
      expect="${expect}.${MULLE_UNAME}"
   fi

   if [ ! -f "${expect}" ]
   then
      internal_fail "\"${expect}\" is missing from test"
   fi

   local diffs

   diffs="`diff -b -B "${output}" "${expect}"`"
   if [ $? -ne 0 ]
   then
      # fix for mingw
      if [ `wc -l <<< "${diffs}"` -eq 2 ]
      then
         if egrep -q 'CMAKE_LINKER:PATH=' <<< "${diffs}"
         then
            return 0
         fi
      fi


      log_error "Unexpected output generated"
      cat <<EOF >&2
----------------
Output: ($output)
----------------
`cat "${output}"`
----------------
Expected: ($expect)
----------------
`cat "${expect}"`
----------------
Diff:
----------------
${diffs}
----------------
EOF
      exit 1
   fi
}


run_test()
{
   local meson_expect="$1"; shift
   local make_expect="$1"; shift

   local meson_output
   local make_output

   meson_output="${directory}/meson-args.txt"
   make_output="${directory}/make-args.txt"

   MESON_REDIRECT_FILE="${meson_output}" \
   NINJA_REDIRECT_FILE="${make_output}" \
      run_mulle_make build --build-dir "${directory}/build" \
                           -DMESON="${PWD}/../mock-meson" \
                           -DNINJA="${PWD}/../mock-ninja" \
                           "$@"

   if [ "$?" -ne 0 ]
   then
      exit 1
   fi

   expect_content "${meson_output}" "${meson_expect}"
   expect_content "${make_output}" "${make_expect}"

   remove_file_if_present "${meson_output}"
   remove_file_if_present "${make_output}"

   rmdir_safer "${directory}/build"
}


main()
{
   MULLE_MAKE_FLAGS="$@"

   _options_mini_main "$@" && set -x

   local MESON

   MESON="`command -v meson`"
   if [ -z  "${MESON}" ]
   then
      log_info "meson not installed, so skipping this test"
      return
   fi

   local directory

   r_make_tmp_directory || exit 1
   directory="${RVAL}"

   #
   # Default is release
   #
   run_test "release_meson.txt" "ninja.txt" --no-determine-sdk
   log_verbose "----- #1 PASSED -----"

   run_test "release_prefix_meson.txt" "ninja.txt" --no-determine-sdk "--prefix" "/tmp/foo"
   log_verbose "----- #2 PASSED -----"

   #
   # check -I -L -F
   #
   run_test "paths_meson.txt" "ninja.txt" -DDETERMINE_SDK='NO' \
                                             -I /usr/local/include:/usr/include \
                                             -L /usr/local/lib:/usr/lib \
                                             -F /Network/Library/Frameworks:/Library/Frameworks
   log_verbose "----- #3 PASSED -----"


   log_info "----- ALL PASSED -----"

   rmdir_safer "${directory}"
}



init()
{
   MULLE_MAKE="${MULLE_MAKE:-${PWD}/../../mulle-make}"
}



init "$@"
main "$@"

