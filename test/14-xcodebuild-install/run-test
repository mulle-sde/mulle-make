#! /usr/bin/env bash

[ "${TRACE}" = 'YES' ] && set -x


run_mulle_make()
{
   log_fluff "####################################"
   log_fluff ${MULLE_MAKE} ${MULLE_MAKE_FLAGS} "$@"
   log_fluff "####################################"

   exekutor ${MULLE_MAKE} ${MULLE_MAKE_FLAGS} "$@"
}


main()
{
   MULLE_MAKE_FLAGS="$@"

   _options_mini_main "$@"


   if [ -z "`command -v "xcodebuild"`" ]
   then
      log_info "xcodebuild not installed, so skipping this test"
      return
   fi

   local directory
   local dstdir
   local builddir

   directory="`make_tmp_directory`" || exit 1
   directory="${directory:-/tmp/build}"

   builddir="${directory}/build"
   dstdir="${directory}/root"

   #
   # Default is release
   #
   if ! run_mulle_make install --no-ninja --build-dir "${builddir}" "." "${dstdir}"
   then
      exit 1
   fi

   [ -x "${dstdir}/usr/local/bin/myexe" ]           || fail "myexe not produced"
   [ -f "${dstdir}/usr/local/lib/libmylib.dylib" ]  || fail "libmylib.dylib not produced"
   [ -f "${dstdir}/usr/local/include/mylib.h" ]     || fail "mylib.h not produced"

   log_verbose "----- #1 PASSED -----"

   log_info "----- ALL PASSED -----"

   rmdir_safer "${directory}"
}



init()
{
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir`" || exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   MULLE_MAKE="${MULLE_MAKE:-${PWD}/../../mulle-make}"
}



init "$@"
main "$@"

