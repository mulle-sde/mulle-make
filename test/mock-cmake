#! /bin/sh
# shellcheck shell=bash
#
# this file will be sourced in 

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if ! [ ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR+x} ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "${1:-}" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################


filter_defines()
{
   sed -e 's|/Applications/Xcode.*\.app/.*/MacOSX.*\.sdk|\${SDKPATH}|g' |
   sed -e 's|/Library/Developer/CommandLineTools/SDKs/MacOSX.*\.sdk|\${SDKPATH}|g'|
   sed -e '/^CMAKE[12]=/d'
}


_emit_defines()
{
   while [ "$#" -ne 0 ]
   do
      case "$1" in
         -D)
            shift
            printf "%s\n" "$1"
         ;;

         -D*)
            cut -c3- <<< "${1}"
         ;;

         -N|-L*)
         ;;

         -[A-V])
            shift
         ;;
      esac

      shift
   done
}


emit_defines()
{
   local escaped_test_path
   local escaped_tmp_path

   [ -z "${MULLE_TEST_DIR}" ] && _internal_fail "MULLE_TEST_DIR is undefined"
   [ -z "${MULLE_TMP_DIR}" ] && _internal_fail "MULLE_TMP_DIR is undefined"

   r_escaped_sed_pattern "${MULLE_TEST_DIR}"
   escaped_test_path="${RVAL}"
   r_escaped_sed_pattern "${MULLE_TMP_DIR}"
   escaped_tmp_path="${RVAL}"
   _emit_defines "$@"| sed -e "s/${escaped_test_path:-^}/\${MULLE_TEST_DIR}/g" -e "s/${escaped_tmp_path:-^}/\${MULLE_TMP_DIR}/g"
}


main()
{
   local envvar
   local filename

   # remove mock- prefix , convert to uppercase, append _REDIRECT_FILE
   envvar="`basename -- "$0" | sed 's/^[A-Za-z]*-\(.*\)/\1/' | tr '[:lower:]-' '[:upper:]_'`_REDIRECT_FILE"
   if [ ${ZSH_VERSION+x} ]
   then
      filename="${(P)envvar}"
   else
      filename="${!envvar}"
   fi

   if [ ! -z "${filename}" ] && [ ! -f "${filename}" ]
   then
      log_info "${MULLE_EXECUTABLE_NAME}: Writing defines to \"${filename}\""
      emit_defines "$@" | filter_defines | LC_ALL=C sort > "${filename}"
   else
      emit_defines "$@" | filter_defines | LC_ALL=C sort
   fi
}

main "$@"
