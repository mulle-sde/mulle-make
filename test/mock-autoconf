#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "$1" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################

filter_darwin()
{
   sed -e 's|/Applications/Xcode.*\.app/.*/MacOSX.*\.sdk|\${SDKPATH}|g' |
   sed -e 's|/Library/Developer/CommandLineTools/SDKs/MacOSX.*\.sdk|\${SDKPATH}|g'
}


main()
{
   local envvar
   local filename

   envvar="`basename -- "$0" | sed 's/^[A-Za-z]*-\(.*\)/\1/' | tr '[a-z]' '[A-Z]'`_REDIRECT_FILE"
   if [ ! -z "${ZSH_VERSION}" ]
   then
      filename="${(P)envvar}"
   else
      filename="${!envvar}"
   fi
   if [ ! -z "${filename}"  ]
   then
      log_info "${MULLE_EXECUTABLE_NAME}: Writing defines to \"${filename}\""
      printf "%s\n" "$*" | filter_darwin > "${filename}"
   else
      printf "%s\n" "$*" | filter_darwin
   fi
}



main "$@"


