#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE:-}" = 'YES' -o "${MULLE_MAKE_TRACE:-}" = 'YES' ] && set -x && : "$0" "$@"
[ "${MULLE_MAKE_DUMP_ENV:-}" = 'YES' ] && env | sort >&2


MULLE_EXECUTABLE_VERSION="2.4.0"
#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#

if ! [ ${MULLE_MAKE_LIBEXEC_DIR+x} ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-make" "mulle-make-build.sh"
   MULLE_MAKE_LIBEXEC_DIR="${RVAL}"
fi

set +u


#
# This is the make::main user interface to mulle-make
# sorta like git
#
make::print_commands()
{
   local  show_all="${1:-NO}"

   SHOWN_COMMANDS="\
   project       : build project (default)
   definition    : manage definitions like build flags for build tools
   install       : build project and install"

   HIDDEN_COMMANDS="\
   libexec-dir   : print path to ${MULLE_USAGE_NAME} libexec
   list          : list definitions values at build time
   log           : show build log (if run standalone)
   show          : show available buildtools
   uname         : ${MULLE_USAGE_NAME}'s simplified uname(1)
   version       : print mulle-make version"


   printf "%s\n" "${SHOWN_COMMANDS}"

   if [ "${show_all}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}"
   fi
}


make::print_flags()
{
   cat <<EOF
   -f            : force operation
   --args <file> : read the commandline from <file>. Must be only option.
   --clear       : clear all DEFINITION_ variables defined in environment
EOF

   options_technical_flags_usage "         : "
}


make::usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command] [options]

   Build a project using a buildtool like cmake or configure. mulle-make will 
   try to guess what kind of build system to use and how to invoke it. At its 
   simplest, \`mulle-make\` without arguments is a shortcut for 
   \`mkdir build; cd build; cmake .. ; make; cd ..\`.

   Customize your build with \`-D\` definitions like 
   "-DFOO=1 -DOTHER_CPPFLAGS=-fPIC". Keep a permanent set of these definitions
   around with the \'definition\' command.

   See \`mulle-make project -h\` for more help.

Flags:
EOF

   make::print_flags | LC_ALL=C sort

   cat <<EOF

Commands:
EOF

   make::print_commands "${verbose}"

   if [ "${verbose}" = 'NO' ]
   then
      cat <<EOF
      (use \`mulle-make -v help\` to show more commands)
EOF
   fi

   cat <<EOF

Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.

Environment:
   mulle-make itself ignores environment variables. CFLAGS and other 
   environment variables are passed through to the actual build system. 
   So \`CFLAGS=-O0 -g mulle-make\` will work. An exception are the environment
   variables CC and CXX which are used to figure out the C compilers used.

EOF

   exit 1
}


make::r_consume_arguments()
{
   log_entry "make::r_consume_arguments"

   local argument="$1"

   local arguments 

   if [ ! -z "${argument}" ]
   then
      arguments="'${argument}'"
   fi

   while read -r argument
   do
      r_escaped_singlequotes "${argument}"
      r_concat "${arguments}" "'${argument}'"
      arguments="${RVAL}"
   done

   RVAL="${arguments}"
}


make::_main()
{
   local OPTION_CLEAR_GLOBAL_DEFINITIONS='DEFAULT'

   #
   # simple option handling
   #
   local argument
   local cmd

   while read -r argument
   do
      if options_technical_flags "${argument}"
      then
         continue
      fi

      case "${argument}" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            make::usage "${MULLE_TRACE}"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --clear|--clear-global-definitions)
            OPTION_CLEAR_GLOBAL_DEFINITIONS='YES'
         ;;

         --no-clear|--no-clear-global-definitions)
            OPTION_CLEAR_GLOBAL_DEFINITIONS='NO'
         ;;

         -*)
            cmd="make"
            break
         ;;

         *)
            break
         ;;
      esac

   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   eval `"${MULLE_ENV:-mulle-env}" --search-as-is mulle-tool-env make` || exit 1

   if [ -z "${cmd}" ]
   then
      cmd="${argument:-make}"
      argument=
   fi

   if [ "${OPTION_CLEAR_GLOBAL_DEFINITIONS}" = 'YES' ]
   then
      include "make::definition"

      # wipe environment off all DEFINITION_ keys
      make::definition::clear_all_definition_keys
   fi

   case "${cmd}" in
      clean)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         # possibly unconsumed argument
         make::build::clean_main "${argument}"
      ;;

      project|build|make)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         # possibly unconsumed argument
         make::build::build_main "${argument}"
      ;;

      definition)
         # shellcheck source=src/mulle-make-definition.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-definition.sh"

         make::definition::main
      ;;

      install|craft)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         make::build::install_main
      ;;

      list)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         make::build::list_main
      ;;

      log)
         # shellcheck source=src/mulle-make-log.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-log.sh"

         # possibly unconsumed argument
         make::r_consume_arguments "${argument}"
         eval make::log::main ${RVAL}
      ;;

      show)
         # shellcheck source=src/mulle-make-show.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-show.sh"

         make::show::main
      ;;

      libexec-dir|library-path)
         printf "%s\n" "${MULLE_MAKE_LIBEXEC_DIR}"
      ;;

      uname)
         printf "%s\n" "${MULLE_UNAME}"
      ;;

      version)
         printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         make::build::build_main "${cmd}"
      ;;
   esac
}


make::print_arguments()
{
   while [ $# -ne 0 ]
   do
      printf "%s\n" "$1"  # echo snarfs up some options like -n
      shift
   done
}


make::main()
{
   local args

   if [ $# -eq 2 -a "$1" = "--args" ]
   then
      local filename

      filename="$2"
      case "${filename}" in
         ""|"-")
            args="`cat`"
            filename=""
         ;;

         *)
            [ -f "${filename}" ] || fail "file \"${filename}\" not found"
            args="`cat "${filename}" `"
         ;;
      esac

   else
      args="`make::print_arguments "$@" `"
   fi

   make::_main <<< "${args}"
}


call_with_flags "make::main" "${MULLE_MAKE_FLAGS}" "$@"
