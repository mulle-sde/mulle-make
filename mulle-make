#! /usr/bin/env bash
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_MAKE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=0.12.1

#
# This is the main user interface to mulle-make
# sorta like git
#

trap_fail()
{
   exit 1
}


print_commands()
{
   local  show_all="${1:-NO}"

   SHOWN_COMMANDS="\
   make          : build project (default)
   definition    : manage definitions like build flags for build tools
   install       : build project and install"

   HIDDEN_COMMANDS="\
   libexec-dir   : print path to ${MULLE_USAGE_NAME} libexec
   show          : show available buildtools
   uname         : ${MULLE_USAGE_NAME}'s simplified uname(1)
   version       : print mulle-make version"


   printf "%s\n" "${SHOWN_COMMANDS}"

   if [ "${show_all}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}"
   fi
}


print_flags()
{
   cat <<EOF
   -f            : force operation
   --args <file> : read the commandline from <file>. Must be only option.
EOF

   options_technical_flags_usage "         : "
}


usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command] [options]

   Build a project using a buildtool like cmake or configure. At its simplest,
   this is a shortcut for: \`mkdir build; cd build; cmake .. ; make; cd ..\`.

   Customize your build with \`make -D\` definitions like for example
   "-DFOO=1 -DOTHER_CPPFLAGS=-fPIC". Keep a permanent set of these definitions
   around  with the \'definition\' command.

   See \`mulle-make build -h\` for more help.

Flags:
EOF

   print_flags | LC_ALL=C sort

   cat <<EOF

Commands:
EOF

   print_commands "${verbose}"

   if [ "${verbose}" = 'NO' ]
   then
      cat <<EOF
      (use \`mulle-make -v help\` to show more commands)
EOF
   fi

   cat <<EOF

Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.

Environment:
   mulle-make ignores environment variables. They may affect the buildtool
   though.

EOF

   exit 1
}


_main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'
   local MULLE_FLAG_IGNORE_GRAVEYARD='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'
   local MULLE_FLAG_VERBOSE_MAKE='NO'

   #
   # simple option handling
   #
   local argument
   local cmd

   while read -r argument
   do
      if options_technical_flags "${argument}"
      then
         continue
      fi

      case "${argument}" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            cmd="make"
            break
         ;;

         *)
            break
         ;;
      esac

   done

   options_setup_trace "${MULLE_TRACE}"

   if [ -z "${cmd}" ]
   then
      cmd="${argument:-make}"
      argument=
   fi

   case "${cmd}" in
      project|build|make)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         # possibly uncomsumed argument
         make_build_main "${argument}"
      ;;

      definition)
         # shellcheck source=src/mulle-make-definition.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-definition.sh"

         make_definition_main
      ;;

      install|craft)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         make_install_main
      ;;

      list)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         make_list_main
      ;;

      show)
         # shellcheck source=src/mulle-make-show.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-show.sh"

         make_show_main
      ;;

      libexec-dir|library-path)
         printf "%s\n" "${MULLE_MAKE_LIBEXEC_DIR}"
      ;;

      uname)
         printf "%s\n" "${MULLE_UNAME}"
      ;;

      version)
         printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         # shellcheck source=src/mulle-make-build.sh
         . "${MULLE_MAKE_LIBEXEC_DIR}/mulle-make-build.sh"

         make_build_main "${cmd}"
      ;;
   esac
}


print_arguments()
{
   while [ $# -ne 0 ]
   do
      printf "%s\n" "$1"  # echo snarfs up some options like -n
      shift
   done
}


main()
{
   local args

   if [ $# -eq 2 -a "$1" == "--args" ]
   then
      local filename

      filename="$2"
      case "${filename}" in
         ""|"-")
            filename=""
         ;;

         *)
            [ -f "${filename}" ] || fail "file \"${filename}\" not found"
         ;;
      esac

      args="`cat "${filename}" `"
   else
      args="`print_arguments "$@" `"
   fi

   _main <<< "${args}"
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   r_get_libexec_dir "$0" "mulle-make" "mulle-make-build.sh"
   MULLE_MAKE_LIBEXEC_DIR="${RVAL}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         printf "%s\n" "${MULLE_MAKE_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail
}
###
### INIT
###
########


#
# leading backslash ? looks like we're getting called from
# mingw via a .BAT or so
#
case "$PATH" in
   '\\'*)
      PATH="${PATH//\\/\/}"
   ;;
esac


_init "$@" # needs params

quote="'"
args=""
for arg in "$@"
do
   arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
   args="${args} '${arg}'"
done

unset quote
unset arg


eval main "${MULLE_MAKE_FLAGS}" "${args}"
